package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/PICT-LibraryAutomation/granthpal/graph"
	"github.com/PICT-LibraryAutomation/granthpal/remote/models"
	"github.com/PICT-LibraryAutomation/granthpal/utils"
)

// Meta is the resolver for the meta field.
func (r *bookResolver) Meta(ctx context.Context, obj *graph.Book) (*graph.BookMetadata, error) {
	var m models.BookMetadata
	if err := r.Remote.First(&m, "id = ?", obj.MetaID).Error; err != nil {
		return nil, err
	}

	return m.ToGraphQL(), nil
}

// IssueRecords is the resolver for the issueRecords field.
func (r *bookResolver) IssueRecords(ctx context.Context, obj *graph.Book) ([]*graph.IssueRecord, error) {
	var irs []models.IssueRecord
	if err := r.Remote.First(&models.Book{ID: obj.ID}).Association("IssueRecords").Find(&irs); err != nil {
		return nil, err
	}

	return utils.Map(irs, func(ir models.IssueRecord) *graph.IssueRecord {
		return ir.ToGraphQL()
	}), nil
}

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, inp graph.CreateBookInp) (*graph.Book, error) {
	panic(fmt.Errorf("not implemented: CreateBook - createBook"))
}

// RemoveBook is the resolver for the removeBook field.
func (r *mutationResolver) RemoveBook(ctx context.Context, id string) (*string, error) {
	panic(fmt.Errorf("not implemented: RemoveBook - removeBook"))
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, inp graph.UpdateBookInp) (*graph.Book, error) {
	panic(fmt.Errorf("not implemented: UpdateBook - updateBook"))
}

// Book is the resolver for the book field.
func (r *queryResolver) Book(ctx context.Context, id string) (*graph.Book, error) {
	var b models.Book
	if err := r.Remote.First(&b, "id = ?", id).Error; err != nil {
		return nil, err
	}

	return b.ToGraphQL(), nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*graph.Book, error) {
	var bs []models.Book
	if err := r.Remote.Find(&bs).Error; err != nil {
		return nil, err
	}

	return utils.Map(bs, func(b models.Book) *graph.Book {
		return b.ToGraphQL()
	}), nil
}

// Book returns graph.BookResolver implementation.
func (r *Resolver) Book() graph.BookResolver { return &bookResolver{r} }

type bookResolver struct{ *Resolver }
