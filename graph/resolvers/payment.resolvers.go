package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/PICT-LibraryAutomation/granthpal/graph"
	"github.com/PICT-LibraryAutomation/granthpal/remote/models"
	"github.com/PICT-LibraryAutomation/granthpal/utils"
)

// ResolvePayment is the resolver for the resolvePayment field.
func (r *mutationResolver) ResolvePayment(ctx context.Context, id string) (*graph.Payment, error) {
	var p models.Payment
	if err := r.Remote.First(&p, "id = ?", id).Error; err != nil {
		return nil, err
	}

	p.Resolved = true
	if err := r.Remote.Save(&p).Error; err != nil {
		return nil, err
	}

	return p.ToGraphQL(), nil
}

// User is the resolver for the user field.
func (r *paymentResolver) User(ctx context.Context, obj *graph.Payment) (*graph.User, error) {
	var u models.User
	if err := r.Remote.First(&u, "id = ?", obj.UserID).Error; err != nil {
		return nil, err
	}

	return u.ToGraphQL(), nil
}

// IssueRecord is the resolver for the issueRecord field.
func (r *paymentResolver) IssueRecord(ctx context.Context, obj *graph.Payment) (*graph.IssueRecord, error) {
	var ir models.IssueRecord
	if err := r.Remote.First(&ir, "payment_id = ?", obj.ID).Error; err != nil {
		return nil, err
	}

	return ir.ToGraphQL(), nil
}

// Payment is the resolver for the payment field.
func (r *queryResolver) Payment(ctx context.Context, id string) (*graph.Payment, error) {
	var p models.Payment
	if err := r.Remote.First(&p, "id = ?", id).Error; err != nil {
		return nil, err
	}

	return p.ToGraphQL(), nil
}

// Payments is the resolver for the payments field.
func (r *queryResolver) Payments(ctx context.Context) ([]*graph.Payment, error) {
	var ps []models.Payment
	if err := r.Remote.Find(&ps).Error; err != nil {
		return nil, err
	}

	return utils.Map(ps, func(p models.Payment) *graph.Payment {
		return p.ToGraphQL()
	}), nil
}

// UserPayments is the resolver for the userPayments field.
func (r *queryResolver) UserPayments(ctx context.Context, userID string) ([]*graph.Payment, error) {
	var ps []models.Payment
	if err := r.Remote.Find(&ps, "user_id = ?", userID).Error; err != nil {
		return nil, err
	}

	return utils.Map(ps, func(p models.Payment) *graph.Payment {
		return p.ToGraphQL()
	}), nil
}

// Payment returns graph.PaymentResolver implementation.
func (r *Resolver) Payment() graph.PaymentResolver { return &paymentResolver{r} }

type paymentResolver struct{ *Resolver }
