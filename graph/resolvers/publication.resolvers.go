package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/PICT-LibraryAutomation/granthpal/graph"
)

// CreatePublication is the resolver for the createPublication field.
func (r *mutationResolver) CreatePublication(ctx context.Context, inp graph.CreatePublicationInp) (*graph.Publication, error) {
	panic(fmt.Errorf("not implemented: CreatePublication - createPublication"))
}

// DeletePublication is the resolver for the deletePublication field.
func (r *mutationResolver) DeletePublication(ctx context.Context, id string) (*string, error) {
	panic(fmt.Errorf("not implemented: DeletePublication - deletePublication"))
}

// UpdatePublication is the resolver for the updatePublication field.
func (r *mutationResolver) UpdatePublication(ctx context.Context, inp graph.UpdatePublicationInp) (*graph.Publication, error) {
	panic(fmt.Errorf("not implemented: UpdatePublication - updatePublication"))
}

// Books is the resolver for the books field.
func (r *publicationResolver) Books(ctx context.Context, obj *graph.Publication) ([]*graph.BookMetadata, error) {
	panic(fmt.Errorf("not implemented: Books - books"))
}

// Publication is the resolver for the publication field.
func (r *queryResolver) Publication(ctx context.Context, id string) (*graph.Publication, error) {
	panic(fmt.Errorf("not implemented: Publication - publication"))
}

// Publications is the resolver for the publications field.
func (r *queryResolver) Publications(ctx context.Context) ([]*graph.Publication, error) {
	panic(fmt.Errorf("not implemented: Publications - publications"))
}

// Publication returns graph.PublicationResolver implementation.
func (r *Resolver) Publication() graph.PublicationResolver { return &publicationResolver{r} }

type publicationResolver struct{ *Resolver }
