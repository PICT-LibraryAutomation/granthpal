package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/PICT-LibraryAutomation/granthpal/graph"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, inp graph.CreateUserInp) (*graph.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*string, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*graph.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*graph.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// IssueRecords is the resolver for the issueRecords field.
func (r *userResolver) IssueRecords(ctx context.Context, obj *graph.User) ([]*graph.IssueRecord, error) {
	panic(fmt.Errorf("not implemented: IssueRecords - issueRecords"))
}

// Payments is the resolver for the payments field.
func (r *userResolver) Payments(ctx context.Context, obj *graph.User) ([]*graph.Payment, error) {
	panic(fmt.Errorf("not implemented: Payments - payments"))
}

// User returns graph.UserResolver implementation.
func (r *Resolver) User() graph.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
